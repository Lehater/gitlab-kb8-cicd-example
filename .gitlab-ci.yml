stages:
  - build
  - test
  - deploy_staging
  - deploy_production

# Переменные для формирования тега образа.
# Если ветка master, используем latest, иначе — <имя_ветки>.
variables:
  DOCKER_TAG: >
    $([[ "${CI_COMMIT_REF_NAME}" == "master" ]] && echo "latest" || echo "${CI_COMMIT_REF_SLUG}")
  DOCKER_IMAGE: "${CI_REGISTRY_IMAGE}:${DOCKER_TAG}"

before_script:
  - git config --global user.email "ci@example.com"
  - git config --global user.name "CI/CD"

# 1. Сборка Docker-образа приложения (Java 17)
build:
  stage: build
  # Используем docker:dind для сборки образа
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "=== Building Docker image: $DOCKER_IMAGE ==="
    - docker build -t "$DOCKER_IMAGE" .
    - echo "=== Logging in to registry ==="
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - echo "=== Pushing Docker image: $DOCKER_IMAGE ==="
    - docker push "$DOCKER_IMAGE"
  only:
    - develop
    - master

# 2. Тестирование (заглушка), приложение на Java 17
test:
  stage: test
  # Для заглушки выберем образ с Java 17 (например, eclipse-temurin)
  image: eclipse-temurin:17
  script:
    - echo "=== Stub tests for Java 17 application ==="
    - echo "Running tests..."
    - echo "Tests passed (stub)!"
  only:
    - develop
    - master

# 3. Деплой в Staging окружение (ветка develop)
deploy_staging:
  stage: deploy_staging
  image: alpine/git
  only:
    - develop
  script:
    - echo "=== Updating staging manifests to use $DOCKER_IMAGE ==="
    # Предполагаем, что deployment.yaml лежит в k8s/staging/deployment.yaml
    - sed -i "s|image: .*|image: $DOCKER_IMAGE|" k8s/staging/deployment.yaml
    - git add k8s/staging/deployment.yaml
    - git commit -m "Update staging image to $DOCKER_TAG [skip ci]"
    - git push origin HEAD:develop
  environment:
    name: staging
    url: "http://example-staging-url"   # при необходимости укажите реальный URL

# 4. Деплой в Production окружение (ветка master)
deploy_production:
  stage: deploy_production
  image: alpine/git
  only:
    - master
  script:
    - echo "=== Updating production manifests to use $DOCKER_IMAGE ==="
    # Предполагаем, что deployment.yaml лежит в k8s/production/deployment.yaml
    - sed -i "s|image: .*|image: $DOCKER_IMAGE|" k8s/production/deployment.yaml
    - git add k8s/production/deployment.yaml
    - git commit -m "Update production image to $DOCKER_TAG [skip ci]"
    - git push origin HEAD:master
  environment:
    name: production
    url: "http://example-production-url"
